package tmaabe

import (
	"fmt"
	"log"
	"strconv"
	"time"
	//"github.com/Nik-U/pbc"
	//"math/big"
	//"crypto/sha256"

)

func Test() {
    	log.Println("---GlobalSetup---")
    	gp := GlobalSetup()
 		fmt.Printf("GlobalParam g:%v n0:%v n1:%v n2:%v \n", gp.g, gp.n0, gp.n1,  gp.n2)
    	
    	log.Println("---CommitteeSetup---")
    	cNum := 1
    	nNum := 25
    	t := 12
    	attnum := 10
    	log.Println("committee number", cNum, "node number", nNum)
    	//committeeID i -> S_i
    	attributes := map[int][]string {
    		0:	[]string{},
    	}
    	for i:=0;i<attnum;i++{
    		attributes[0] = append(attributes[0], strconv.Itoa(i+1)+"a")
    	}
    	nodes := make([][]*Node, cNum)
    	for i:=0; i<cNum; i++{
    		log.Println("Setup Committee", i)
    		nodes[i] = CommitteeSetup(i, gp, nNum, attributes[i], t)
    		/*for _, node := range nodes[i]{
    			fmt.Printf("%+v\n", node)
    		}*/
    	}
		log.Println("---User---")
    	user := NewReceiver(gp, "ss", []string{"1a", "2a", "3a", "4a", "5a", "6a", "7a", "8a", "9a", "10a"})
    	user.tau = map[string]int{
		"1a":0, 
		"2a":0, 
		"3a":0, 
		"4a":0, 
		"5a":0, 
		"6a":0, 
		"7a":0, 
		"8a":0, 
		"9a":0, 
		"10a":0,
	}
	
	aksmap := make(map[string]map[int]*AttributeKeyShare)
	for att, _ := range user.tau{
		aksmap[att] = make(map[int]*AttributeKeyShare)
	}
	keystart := time.Now()
	for i:=0; i<cNum; i++{
    		for _, node := range nodes[i] {
    			//fmt.Println(node)
    			flag := 1
    			for _, att := range attributes[i]{
    			
    				aks := node.KeyGen(att, "ss")
    			
    				if user.KeyVer(aks, node.pk1, node.pk2[att]) == false{
    					flag = 0								
    				}
    				aksmap[att][node.nodeID] = aks
    			}
    			if flag == 1{
    				user.qualified[node.committeeID] = append(user.qualified[node.committeeID], node.nodeID)
    				log.Printf("verify the key generated by [node %d]", node.nodeID)
    			}
    		}
    	}
    	keycost := time.Since(keystart)
    	log.Println("key verify and KeyAggregate cost",keycost)
    	//fmt.Printf("%+v\n", user)
    	
    	fmt.Println("--- KeyAggregate ---")
    	for att, _ := range aksmap {
    		user.KeyAggregate(aksmap[att], user.qualified[user.tau[att]], user.tau[att], att)
    	}
	fmt.Printf("user attributekey: %+v\n", user.attributeKey)
	
	fmt.Println("---Encrypt---")
	sender := NewSender(gp, attributes)
	for i:=0;i<cNum;i++{
		sender.PK1[i] = nodes[i][0].PK1
		sender.PK2[i] = nodes[i][0].PK2
	}
	
	//fmt.Println(sender)
	enstart := time.Now()
	message := new(Message)
	message.mElement = gp.pairing.NewGT().Rand()
	message.gp = gp
	
	ac := new(AccessStructure)
	ac.tau = make(map[string]int)
	for i:=0;i<=10;i++{
		ac.tau[strconv.Itoa(i+1)] = 0
	}
	result := ""
	for i:=0;i<attnum;i++{
		result = result + attributes[0][i] + " and "
	}
	ac.BuildFromPolicy(result[:len(result)-5])
	fmt.Printf("access structure: \n%+v\n", ac.GetMatrixAsString())
	fmt.Println("message:", message.mElement)
	ct := sender.Encrypt(message, ac)
	encost := time.Since(enstart)
	fmt.Printf("ciphertext: %+v\n", ct)
	fmt.Println("--- Decrypt ---")
	destart := time.Now()
	m := user.Decrypt(ct)
	decost := time.Since(destart)
	fmt.Println("Dec(ct):", m.mElement)
	fmt.Println("Dec(ct) == message:", m.mElement.Equals(message.mElement))

	log.Println("key verify and KeyAggregate cost",keycost)
	log.Println("Encrypt cost",encost)
	log.Println("Decrypt cost",decost)
}
