package network

import (
	"bufio"
	"encoding/json"
	"log"
	"net"
)

// Server represents a server in the network.
type TCPServer struct {
	Address string // The server's listening address
}

// Start starts the server to accept incoming connections.
func (s *TCPServer) Start(handleMessage func(JsonMessage)) {
	listener, err := net.Listen("tcp", s.Address)
	if err != nil {
		log.Fatalf("Failed to listen on %s: %v", s.Address, err)
	}
	defer listener.Close()
	log.Printf("Server listening on %s", s.Address)

	for {
		conn, err := listener.Accept()
		if err != nil {
			log.Printf("Failed to accept connection: %v", err)
			continue
		}
		go s.handleConnection(conn, handleMessage)
	}
}

// handleConnection handles individual client connections.
func (s *TCPServer) handleConnection(conn net.Conn, handleMessage func(JsonMessage)) {
	defer conn.Close()
	reader := bufio.NewReader(conn)

	for {
		message, err := reader.ReadString('\n')
		if err != nil {
			log.Printf("Connection read error: %v", err)
			break
		}

		var msg JsonMessage
		if err := json.Unmarshal([]byte(message), &msg); err != nil {
			log.Printf("Failed to unmarshal JsonMessage: %v", err)
			continue
		}

		handleMessage(msg)
	}
}
